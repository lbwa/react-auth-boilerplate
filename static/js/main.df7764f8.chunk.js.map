{"version":3,"sources":["components/BaseLoading/index.module.sass","shared/utils.ts","plugins/auth.tsx","shared/env.ts","components/BaseLoading/index.tsx","plugins/progress/index.tsx","views/index.tsx","store/user/model.ts","store/user/actions.ts","store/user/reducer.ts","store/index.ts","index.tsx"],"names":["module","exports","isDef","val","undefined","authorizer","abilitiesMap","has","strong","weak","Boolean","pendingList","map","type","isStrong","Array","isArray","length","name","AuthRoute","Component","component","redirect","routeProps","hasAuthorized","useSelector","user","render","rawRouteProps","to","pathname","state","from","location","BaseLoading","className","classes","container","spinner","withProgress","NProgress","done","start","this","props","React","configure","showSpinner","Home","lazy","User","Err","App","fallback","path","exact","code","message","userState","token","abilities","actionNames","reducer","action","payload","namespace","reducers","combineReducers","userReducer","createStore","process","ReactDOM","store","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,UAAY,+BAA+B,QAAU,+B,uMCAhE,SAASC,EAAeC,GAC7B,YAAeC,IAARD,GAA6B,OAARA,ECyC9B,SAASE,EACPC,EADF,GAGG,IADCC,EACF,EADEA,IAAKC,EACP,EADOA,OAAQC,EACf,EADeA,KAEf,GAAIP,EAAMK,GAAM,OAAOG,QAAQJ,EAAaC,IAE5C,IAhBAI,EACAC,EACAC,EAcMC,EAAWC,MAAMC,QAAQR,GAC/B,OAjBAG,EAkBEG,EAAWN,EAASC,EAjBtBG,EAkBEN,EAjBFO,EAkBEC,EAAW,QAAU,UAhBnBC,MAAMC,QAAQL,KAAgBA,EAAYM,SACrCN,EAAYE,IAAM,SAAAK,GAAI,OAAIN,EAAIM,MAmBlC,SAASC,EAAT,GAOa,IANPC,EAMM,EANjBC,UAMiB,IALjBC,gBAKiB,MCtDW,ODsDX,EAJjBf,EAIiB,EAJjBA,IACAC,EAGiB,EAHjBA,OACAC,EAEiB,EAFjBA,KACGc,EACc,8DACXC,EAAgBC,aAAgC,mBACpDpB,EADoD,EAAGqB,KACvCpB,aAAc,CAC5BC,MACAC,SACAC,YAGJ,OACE,kBAAC,IAAD,iBACMc,EADN,CAEEI,OAAQ,SAAAC,GAAa,OACnBJ,EACE,kBAACJ,EAAcQ,GAEf,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAUR,EACVS,MAAO,CACLC,KAAMT,EAAWU,iB,qBEhFlB,SAASC,IACtB,OACE,yBAAKC,UAAWC,IAAQC,WACtB,uBAAGF,UAAWC,IAAQE,UACtB,uC,mECMC,SAASC,EAAsBnB,GACpC,mMAEIoB,IAAUC,MAAK,KAFnB,6CAMID,IAAUE,UANd,+BAUI,OAAO,kBAACtB,EAAcuB,KAAKC,WAV/B,EAAM,CAAwBC,IAAMzB,WARtCoB,IAAUM,UAAU,CAAEC,aAAa,ICQnC,IAAMC,EAAOT,EACXU,gBAAK,kBAAM,iCAEPC,EAAOX,EACXU,gBAAK,kBAAM,iCAEPE,EAAMF,gBAAK,kBAAM,gCA4BRG,MA1Bf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAACnB,EAAD,OAClB,kBAAC,IAAD,KACE,kBAACf,EAAD,CAAWmC,KAAK,QAAQjC,UAAW6B,IACnC,kBAAC,IAAD,CAAOK,OAAK,EAACD,KAAK,IAAIjC,UAAW2B,IAGjC,kBAAC,IAAD,CACEM,KHtBkB,OGuBlBjC,UAAWkB,GAAa,kBACtB,kBAACY,EAAD,CAAKK,KHvBU,MGuBWC,QHtBR,0BGyBtB,kBAAC,IAAD,CACEpC,UAAWkB,GAAa,kBACtB,kBAACY,EAAD,CAAKK,KH1BS,MG0BWC,QHzBR,2C,wBIJlBC,EAAY,CACvBC,MAAO,GACPC,UAAW,GACXtD,aAAc,ICVHuD,EACD,WADCA,EAED,WCDZ,SAASC,IAA4D,IAApD/B,EAAmD,uDAA3C2B,EAAWK,EAAgC,uCAClE,OAAQA,EAAOlD,MACb,KAAKgD,EACH,OAAO,eACF9B,EADL,GAEKgC,EAAOC,SAGd,KAAKH,EACH,OAAOH,EAET,QACE,OAAO3B,GAIb+B,EAAQG,UAAY,OAELH,QCTTI,EAAWC,YAAgB,eAC9BC,EAAYH,UAAYG,IAGZC,cACbH,GACAI,GCTFC,IAAS5C,OACP,kBAAC,IAAD,CAAU6C,MAAOA,GACf,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.df7764f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BaseLoading_container__1HogU\",\"spinner\":\"BaseLoading_spinner__1Sl3v\"};","// https://www.typescriptlang.org/docs/handbook/utility-types.html#nonnullablet\nexport function isDef<T = any>(val: T): val is NonNullable<T> {\n  return val !== undefined && val !== null\n}\n","import React from 'react'\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nimport { Ability, AbilitiesMap, AbilityName } from '../store/user/model'\nimport { StoreType } from '../store'\nimport { isDef } from '../shared/utils'\nimport { forbiddenRoute } from '../shared/env'\n\ninterface BaseAuthRouteProps {\n  component: React.ComponentType<any>\n  redirect?: string\n  has?: AbilityName\n  strong?: AbilityName[]\n  weak?: AbilityName[]\n}\n\ntype AuthRouteProps = BaseAuthRouteProps & Omit<RouteProps, 'render'>\ntype AuthElementProps = Omit<BaseAuthRouteProps, 'component' | 'redirect'> &\n  Record<'children', React.ComponentType<any>>\n\nexport function serializeAbilities(abilitiesList: Ability[]) {\n  return abilitiesList.reduce((map, ability) => {\n    if (isDef(map[ability.name])) {\n      map[ability.name] = ability\n    } else {\n      console.warn(`[AB]: Duplicate user ability named ${ability.name}.`)\n    }\n    return map\n  }, {} as AbilitiesMap)\n}\n\nfunction verifyStrongOrWeak(\n  pendingList: AbilityName[] | undefined,\n  map: AbilitiesMap,\n  type: 'every' | 'some'\n) {\n  if (Array.isArray(pendingList) && pendingList.length) {\n    return pendingList[type](name => map[name])\n  }\n  return false\n}\n\nfunction authorizer(\n  abilitiesMap: AbilitiesMap,\n  { has, strong, weak }: Pick<BaseAuthRouteProps, 'has' | 'strong' | 'weak'>\n) {\n  if (isDef(has)) return Boolean(abilitiesMap[has])\n\n  const isStrong = Array.isArray(strong)\n  return verifyStrongOrWeak(\n    isStrong ? strong : weak,\n    abilitiesMap,\n    isStrong ? 'every' : 'some'\n  )\n}\n\nexport function AuthRoute({\n  component: Component,\n  redirect = forbiddenRoute,\n  has,\n  strong,\n  weak,\n  ...routeProps\n}: AuthRouteProps) {\n  const hasAuthorized = useSelector<StoreType, boolean>(({ user }) =>\n    authorizer(user.abilitiesMap, {\n      has,\n      strong,\n      weak\n    })\n  )\n  return (\n    <Route\n      {...routeProps}\n      render={rawRouteProps =>\n        hasAuthorized ? (\n          <Component {...rawRouteProps} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: redirect,\n              state: {\n                from: routeProps.location\n              }\n            }}\n          />\n        )\n      }\n    />\n  )\n}\n\nexport function AuthElement({\n  children: Component,\n  has,\n  strong,\n  weak\n}: AuthElementProps) {\n  const hasAuthorized = useSelector<StoreType, boolean>(({ user }) =>\n    authorizer(user.abilitiesMap, { has, strong, weak })\n  )\n  return hasAuthorized ? <Component /> : null\n}\n","/**\n * @description All symbolic constants should be placed in this file.\n */\n\n/**\n * @further Differences between 401 and 403\n * @MDN https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication\n * @401 https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/401\n * @403 https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n */\nexport const forbiddenRoute = '/403'\nexport const forbiddenCode = '403'\nexport const forbiddenMessage = 'Forbidden access'\nexport const notFoundCode = '404'\nexport const notFoundMessage = 'Seems nothing could be found.'\n","import React from 'react'\nimport classes from './index.module.sass'\n\nexport default function BaseLoading() {\n  return (\n    <div className={classes.container}>\n      <p className={classes.spinner}></p>\n      <p>Loading</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport NProgress from 'nprogress'\n// import 'nprogress/nprogress.css' // default nprogress style\n\nimport './index.sass' // customize nprogress style\n\nNProgress.configure({ showSpinner: false })\n\n/**\n * @inspire\n * https://github.com/ReactTraining/react-router/blob/master/packages/react-router/modules/Prompt.js\n * https://github.com/ReactTraining/react-router/blob/master/packages/react-router/modules/Lifecycle.js\n */\nexport function withProgress<P = any>(Component: React.ComponentType<P>) {\n  return class Progress extends React.Component<P> {\n    componentDidMount() {\n      NProgress.done(true)\n    }\n\n    componentWillUnmount() {\n      NProgress.start()\n    }\n\n    render() {\n      return <Component {...this.props} />\n    }\n  }\n}\n","import React, { lazy, Suspense } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport { AuthRoute } from '../plugins/auth'\nimport BaseLoading from '../components/BaseLoading'\nimport {\n  forbiddenRoute,\n  forbiddenCode,\n  forbiddenMessage,\n  notFoundCode,\n  notFoundMessage\n} from '../shared/env'\nimport { withProgress } from '../plugins/progress'\n\nconst Home = withProgress(\n  lazy(() => import(/* webpackChunkName: 'home' */ './Home'))\n)\nconst User = withProgress(\n  lazy(() => import(/* webpackChunkName: 'user' */ './User'))\n)\nconst Err = lazy(() => import(/* webpackChunkName: 'err' */ './Error'))\n\nfunction App() {\n  return (\n    <Router>\n      <Suspense fallback={<BaseLoading />}>\n        <Switch>\n          <AuthRoute path=\"/user\" component={User} />\n          <Route exact path=\"/\" component={Home} />\n\n          {/* The following handlers are error handlers. */}\n          <Route\n            path={forbiddenRoute}\n            component={withProgress(() => (\n              <Err code={forbiddenCode} message={forbiddenMessage} />\n            ))}\n          />\n          <Route\n            component={withProgress(() => (\n              <Err code={notFoundCode} message={notFoundMessage} />\n            ))}\n          />\n        </Switch>\n      </Suspense>\n    </Router>\n  )\n}\n\nexport default App\n","export type Ability = {\n  name: 'read' | 'add' | 'delete' | 'modify'\n}\n\nexport type AbilityName = Ability['name']\n\nexport type AbilitiesMap = Record<Ability['name'], Ability>\n\nexport type ActionPayload = Partial<typeof userState>\n\nexport const userState = {\n  token: '',\n  abilities: [] as Ability[],\n  abilitiesMap: {} as AbilitiesMap // also can be WeakMap data type\n}\n","import { Ability } from './model'\n\n// The current namespace action names.\nexport const actionNames = {\n  SET_USER: 'SET_USER',\n  DEL_USER: 'DEL_USER'\n}\n\n/**\n * The following functions are used to create some action to modify redux state.\n *\n * DON'T include any side effect when you create a new function.\n *\n * suggest to create a flux standard action\n * @details https://github.com/redux-utilities/flux-standard-action#flux-standard-action\n */\n\nexport function setUser({\n  token,\n  abilities\n}: {\n  token: string\n  abilities: Ability[]\n}) {\n  return {\n    type: actionNames.SET_USER,\n    payload: {\n      token,\n      abilities\n    }\n  }\n}\n\nexport function delUser() {\n  return {\n    type: actionNames.DEL_USER\n  }\n}\n","import { userState, ActionPayload } from './model'\nimport { IAction } from '../../typings/store'\nimport { actionNames } from './actions'\n\nfunction reducer(state = userState, action: IAction<ActionPayload>) {\n  switch (action.type) {\n    case actionNames.SET_USER:\n      return {\n        ...state,\n        ...action.payload\n      }\n\n    case actionNames.DEL_USER:\n      return userState\n\n    default:\n      return state\n  }\n}\n\nreducer.namespace = 'user'\n\nexport default reducer\n","import { createStore, combineReducers } from 'redux'\n\n// TODO: automatic importation based on required.context\nimport userReducer from './user/reducer'\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__: Function\n  }\n}\n\nexport type StoreType = ReturnType<typeof reducers>\n\nconst reducers = combineReducers({\n  [userReducer.namespace]: userReducer\n})\n\nexport default createStore(\n  reducers,\n  process.env.NODE_ENV === 'development' &&\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__()\n)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport 'normalize.css'\n\nimport './index.sass'\nimport App from './views'\nimport store from './store'\n// import * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister()\n"],"sourceRoot":""}